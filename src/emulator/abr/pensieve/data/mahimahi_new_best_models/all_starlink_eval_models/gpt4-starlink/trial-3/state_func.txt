import numpy as np

def state_func(
    bit_rate_kbps_list,
    buffer_size_second_list,
    delay_second_list,
    video_chunk_size_bytes_list,
    next_chunk_bytes_sizes,
    video_chunk_remain_num,
    total_chunk_num,
    all_bit_rate_kbps,
):
    # Normalization and state calculation constants
    buffer_norm_factor = 60.  # Increase to 60 seconds or consider a logarithmic approach
    throughput_norm_factor = np.max(all_bit_rate_kbps) / 1000.  # Normalize by max bitrate in Mbps
    delay_norm_factor = 5.  # Increase the normalization factor for delay
    alpha = 0.5  # Exponential averaging factor
    history_window = 8
    
    # normal states
    normed_last_bit_rate = bit_rate_kbps_list[-1] / float(np.max(all_bit_rate_kbps))
    normed_last_buffer_size = np.log(buffer_size_second_list[-1] + 1) / np.log(buffer_norm_factor)  # Logarithmic scaling
    remaining_chunk_percentage = float(video_chunk_remain_num / total_chunk_num)

    normal_states = [
        [normed_last_bit_rate],
        [normed_last_buffer_size],
        [remaining_chunk_percentage],
    ]

    # time series states
    throughput_MBps_list = [video_chunk_size_bytes_list[-1] / 1000. / 1000. / delay_second_list[-1] / throughput_norm_factor]
    normed_delay_list = [delay_second_list[-1] / delay_norm_factor]
    for i in range(1, history_window):
        # Exponentially averaged throughput and delay
        exp_avg_throughput = alpha * (video_chunk_size_bytes_list[-(i+1)] / 1000. / 1000. / delay_second_list[-(i+1)]) \
                            + (1 - alpha) * throughput_MBps_list[-1]
        throughput_MBps_list.append(exp_avg_throughput / throughput_norm_factor)
        exp_avg_delay = alpha * (delay_second_list[-(i+1)] / delay_norm_factor) \
                        + (1 - alpha) * normed_delay_list[-1]
        normed_delay_list.append(exp_avg_delay)

    # Reverse lists to align with historical ordering
    throughput_MBps_list.reverse()
    normed_delay_list.reverse()

    # Normalizing next chunk size values using max possible chunk size for normalization
    max_next_chunk_size_MB = np.max(next_chunk_bytes_sizes) / 1000. / 1000.
    next_chunk_bytes_MB = [x / 1000. / 1000. / max_next_chunk_size_MB for x in next_chunk_bytes_sizes]
    
    time_series_states = [
        throughput_MBps_list,
        normed_delay_list,
        next_chunk_bytes_MB,
    ]

    # Return the states
    return {
        "normal_states": normal_states,
        "time_series_states": time_series_states,
    }
